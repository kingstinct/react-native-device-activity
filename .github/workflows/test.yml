# This workflow will run tests using node and then publish a package to GitHub Packages when a release is created
# For more information see: https://docs.github.com/en/actions/publishing-packages/publishing-nodejs-packages

name: Test

on:
  push:

jobs:
  lint:
    name: eslint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - run: bun install
      
      - run: bun lint
  
  typecheck:
    name: Typecheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - run: bun install
      
      - run: bun typecheck

  typecheck-example:
    name: Typecheck (example project)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - run: bun install

      - run: bun install
        working-directory: example

      - run: bun typecheck
        working-directory: example

  bundle-example:
    name: Expo Bundle (example project)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - run: bun install

      - run: bun install
        working-directory: example

      - run: bunx expo export
        working-directory: example

  config-example:
    name: Expo Config (example project)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - run: bun install

      - run: bun install
        working-directory: example

      - run: bunx expo config
        working-directory: example

  prebuild-example:
    name: Expo Prebuild (example project)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - run: bun install

      - run: bun install
        working-directory: example

      - run: bunx expo prebuild
        working-directory: example

  swift-lint:
    name: SwiftLint (example project)
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - uses: actions/cache@v4
        with:
          path: example/ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('example/ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - run: bun install
      
      - run: bun install
        working-directory: example
      
      - run: pod install
        working-directory: example/ios
      
      - run: example/ios/Pods/SwiftLint/swiftlint lint

  swift-test:
    name: Swift Test (example project)
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - run: bun install

      - uses: actions/cache@v4
        with:
          path: example/ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('example/ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: List available Xcode versions
        run: ls /Applications | grep Xcode

      - name: Show current version of Xcode
        run: xcodebuild -version

      - uses: irgaly/xcode-cache@v1
        with:
          key: xcode-cache-deriveddata-${{ github.workflow }}-${{ github.sha }}
          restore-keys: xcode-cache-deriveddata-${{ github.workflow }}-

      - name: Set up Xcode version
        run: sudo xcode-select -s /Applications/Xcode_16.1.app/Contents/Developer
      
      - run: bun install
        working-directory: example
      
      - run: pod install
        working-directory: example/ios
      
      - run: xcodebuild test -workspace reactnativedeviceactivityexample.xcworkspace -scheme Tests -allowProvisioningUpdates -destination "platform=iOS Simulator,OS=latest,name=iPhone 16"
        working-directory: example/ios



      